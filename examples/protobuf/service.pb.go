// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	UppercaseRequest
	UppercaseResponse
	CountRequest
	CountResponse
	Comment
	TestCaseRequest
	TestCaseResponse
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UppercaseRequest struct {
	StringsMap map[string]string `protobuf:"bytes,1,rep,name=strings_map,json=stringsMap" json:"strings_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UppercaseRequest) Reset()                    { *m = UppercaseRequest{} }
func (m *UppercaseRequest) String() string            { return proto.CompactTextString(m) }
func (*UppercaseRequest) ProtoMessage()               {}
func (*UppercaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UppercaseRequest) GetStringsMap() map[string]string {
	if m != nil {
		return m.StringsMap
	}
	return nil
}

type UppercaseResponse struct {
	Ans string `protobuf:"bytes,1,opt,name=ans" json:"ans,omitempty"`
}

func (m *UppercaseResponse) Reset()                    { *m = UppercaseResponse{} }
func (m *UppercaseResponse) String() string            { return proto.CompactTextString(m) }
func (*UppercaseResponse) ProtoMessage()               {}
func (*UppercaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UppercaseResponse) GetAns() string {
	if m != nil {
		return m.Ans
	}
	return ""
}

type CountRequest struct {
	Text   string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Symbol string `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
}

func (m *CountRequest) Reset()                    { *m = CountRequest{} }
func (m *CountRequest) String() string            { return proto.CompactTextString(m) }
func (*CountRequest) ProtoMessage()               {}
func (*CountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CountRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *CountRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type CountResponse struct {
	Count     int64   `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Positions []int64 `protobuf:"varint,2,rep,packed,name=positions" json:"positions,omitempty"`
}

func (m *CountResponse) Reset()                    { *m = CountResponse{} }
func (m *CountResponse) String() string            { return proto.CompactTextString(m) }
func (*CountResponse) ProtoMessage()               {}
func (*CountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CountResponse) GetPositions() []int64 {
	if m != nil {
		return m.Positions
	}
	return nil
}

type Comment struct {
	Text     string                     `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Relates  *Comment                   `protobuf:"bytes,2,opt,name=relates" json:"relates,omitempty"`
	PostedAt *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=PostedAt" json:"PostedAt,omitempty"`
}

func (m *Comment) Reset()                    { *m = Comment{} }
func (m *Comment) String() string            { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()               {}
func (*Comment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Comment) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Comment) GetRelates() *Comment {
	if m != nil {
		return m.Relates
	}
	return nil
}

func (m *Comment) GetPostedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.PostedAt
	}
	return nil
}

type TestCaseRequest struct {
	Comments []*Comment `protobuf:"bytes,1,rep,name=comments" json:"comments,omitempty"`
}

func (m *TestCaseRequest) Reset()                    { *m = TestCaseRequest{} }
func (m *TestCaseRequest) String() string            { return proto.CompactTextString(m) }
func (*TestCaseRequest) ProtoMessage()               {}
func (*TestCaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TestCaseRequest) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

type TestCaseResponse struct {
	Tree map[string]int64 `protobuf:"bytes,1,rep,name=tree" json:"tree,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *TestCaseResponse) Reset()                    { *m = TestCaseResponse{} }
func (m *TestCaseResponse) String() string            { return proto.CompactTextString(m) }
func (*TestCaseResponse) ProtoMessage()               {}
func (*TestCaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TestCaseResponse) GetTree() map[string]int64 {
	if m != nil {
		return m.Tree
	}
	return nil
}

func init() {
	proto.RegisterType((*UppercaseRequest)(nil), "service.string.UppercaseRequest")
	proto.RegisterType((*UppercaseResponse)(nil), "service.string.UppercaseResponse")
	proto.RegisterType((*CountRequest)(nil), "service.string.CountRequest")
	proto.RegisterType((*CountResponse)(nil), "service.string.CountResponse")
	proto.RegisterType((*Comment)(nil), "service.string.Comment")
	proto.RegisterType((*TestCaseRequest)(nil), "service.string.TestCaseRequest")
	proto.RegisterType((*TestCaseResponse)(nil), "service.string.TestCaseResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StringService service

type StringServiceClient interface {
	Uppercase(ctx context.Context, in *UppercaseRequest, opts ...grpc.CallOption) (*UppercaseResponse, error)
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
	TestCase(ctx context.Context, in *TestCaseRequest, opts ...grpc.CallOption) (*TestCaseResponse, error)
}

type stringServiceClient struct {
	cc *grpc.ClientConn
}

func NewStringServiceClient(cc *grpc.ClientConn) StringServiceClient {
	return &stringServiceClient{cc}
}

func (c *stringServiceClient) Uppercase(ctx context.Context, in *UppercaseRequest, opts ...grpc.CallOption) (*UppercaseResponse, error) {
	out := new(UppercaseResponse)
	err := grpc.Invoke(ctx, "/service.string.StringService/Uppercase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringServiceClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := grpc.Invoke(ctx, "/service.string.StringService/Count", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringServiceClient) TestCase(ctx context.Context, in *TestCaseRequest, opts ...grpc.CallOption) (*TestCaseResponse, error) {
	out := new(TestCaseResponse)
	err := grpc.Invoke(ctx, "/service.string.StringService/TestCase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StringService service

type StringServiceServer interface {
	Uppercase(context.Context, *UppercaseRequest) (*UppercaseResponse, error)
	Count(context.Context, *CountRequest) (*CountResponse, error)
	TestCase(context.Context, *TestCaseRequest) (*TestCaseResponse, error)
}

func RegisterStringServiceServer(s *grpc.Server, srv StringServiceServer) {
	s.RegisterService(&_StringService_serviceDesc, srv)
}

func _StringService_Uppercase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UppercaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringServiceServer).Uppercase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.string.StringService/Uppercase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringServiceServer).Uppercase(ctx, req.(*UppercaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.string.StringService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringServiceServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringService_TestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringServiceServer).TestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.string.StringService/TestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringServiceServer).TestCase(ctx, req.(*TestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StringService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.string.StringService",
	HandlerType: (*StringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Uppercase",
			Handler:    _StringService_Uppercase_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _StringService_Count_Handler,
		},
		{
			MethodName: "TestCase",
			Handler:    _StringService_TestCase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x95, 0xe3, 0xa6, 0x4d, 0x26, 0x84, 0x86, 0x55, 0x05, 0x96, 0x05, 0xaa, 0xb1, 0x84, 0x14,
	0x71, 0xb0, 0x21, 0x95, 0x28, 0x14, 0x81, 0x04, 0x06, 0x6e, 0x95, 0x8a, 0x1b, 0x2e, 0x5c, 0xd0,
	0xc6, 0x1d, 0x8c, 0x45, 0xd6, 0x6b, 0x76, 0xd7, 0x51, 0xf3, 0x07, 0x48, 0xfc, 0x06, 0xdf, 0xc8,
	0x19, 0xc5, 0xbb, 0x76, 0x82, 0x21, 0xe4, 0x36, 0x33, 0x3b, 0xef, 0x8d, 0xfc, 0xde, 0x33, 0x0c,
	0x25, 0x8a, 0x45, 0x96, 0x60, 0x50, 0x08, 0xae, 0x38, 0xb9, 0x59, 0xb7, 0x52, 0x89, 0x2c, 0x4f,
	0xdd, 0xe3, 0x94, 0xf3, 0x74, 0x8e, 0x61, 0xf5, 0x3a, 0x2b, 0x3f, 0x87, 0x2a, 0x63, 0x28, 0x15,
	0x65, 0x85, 0x06, 0xf8, 0x3f, 0x2d, 0x18, 0x7d, 0x28, 0x0a, 0x14, 0x09, 0x95, 0x18, 0xe3, 0xb7,
	0x12, 0xa5, 0x22, 0xef, 0x61, 0xa0, 0xf1, 0xf2, 0x13, 0xa3, 0x85, 0x63, 0x79, 0xf6, 0x78, 0x30,
	0x79, 0x14, 0xfc, 0xc9, 0x1d, 0xb4, 0x61, 0xc1, 0xa5, 0xc6, 0x9c, 0xd3, 0xe2, 0x6d, 0xae, 0xc4,
	0x32, 0x06, 0xd9, 0x0c, 0xdc, 0x17, 0x70, 0xd8, 0x7a, 0x26, 0x23, 0xb0, 0xbf, 0xe2, 0xd2, 0xb1,
	0x3c, 0x6b, 0xdc, 0x8f, 0x57, 0x25, 0x39, 0x82, 0xee, 0x82, 0xce, 0x4b, 0x74, 0x3a, 0xd5, 0x4c,
	0x37, 0x67, 0x9d, 0xa7, 0x96, 0xff, 0x00, 0x6e, 0x6d, 0x9c, 0x93, 0x05, 0xcf, 0x25, 0xae, 0x08,
	0x68, 0x2e, 0x6b, 0x02, 0x9a, 0x4b, 0xff, 0x0c, 0x6e, 0x44, 0xbc, 0xcc, 0x55, 0xfd, 0x21, 0x04,
	0xf6, 0x14, 0x5e, 0x2b, 0xb3, 0x52, 0xd5, 0xe4, 0x36, 0xec, 0xcb, 0x25, 0x9b, 0xf1, 0xb9, 0xb9,
	0x62, 0x3a, 0x3f, 0x82, 0xa1, 0xc1, 0x1a, 0xfa, 0x23, 0xe8, 0x26, 0xab, 0x41, 0x85, 0xb6, 0x63,
	0xdd, 0x90, 0xbb, 0xd0, 0x2f, 0xb8, 0xcc, 0x54, 0xc6, 0x73, 0xe9, 0x74, 0x3c, 0x7b, 0x6c, 0xc7,
	0xeb, 0x81, 0xff, 0xdd, 0x82, 0x83, 0x88, 0x33, 0x86, 0xf9, 0xbf, 0x8f, 0x3f, 0x86, 0x03, 0x81,
	0x73, 0xaa, 0x50, 0x56, 0xd7, 0x07, 0x93, 0x3b, 0x6d, 0x55, 0x0d, 0x3a, 0xae, 0xf7, 0xc8, 0x13,
	0xe8, 0x5d, 0x70, 0xa9, 0xf0, 0xea, 0x95, 0x72, 0xec, 0x0a, 0xe3, 0x06, 0xda, 0xd5, 0xa0, 0x76,
	0x35, 0x98, 0xd6, 0xae, 0xc6, 0xcd, 0xae, 0xff, 0x0e, 0x0e, 0xa7, 0x28, 0x55, 0xb4, 0xe1, 0xeb,
	0x09, 0xf4, 0x12, 0x4d, 0x2f, 0x8d, 0xa9, 0x5b, 0xcf, 0x37, 0x8b, 0xfe, 0x0f, 0x0b, 0x46, 0x6b,
	0x22, 0xa3, 0xcd, 0x4b, 0xd8, 0x53, 0x02, 0xd1, 0xb0, 0x3c, 0x6c, 0xb3, 0xb4, 0xf7, 0x83, 0xa9,
	0x40, 0xd4, 0xa1, 0xa8, 0x70, 0xee, 0x29, 0xf4, 0x9b, 0xd1, 0xae, 0x20, 0xd8, 0x1b, 0x41, 0x98,
	0xfc, 0xb2, 0x60, 0xa8, 0x83, 0x74, 0xa9, 0x4f, 0x92, 0x0b, 0xe8, 0x37, 0xd1, 0x20, 0xde, 0xae,
	0x90, 0xba, 0xf7, 0xff, 0xb3, 0x61, 0x3e, 0xee, 0x0d, 0x74, 0x23, 0xed, 0xf5, 0xdf, 0xea, 0xac,
	0xc3, 0xe5, 0xde, 0xdb, 0xf2, 0x6a, 0x58, 0xce, 0xa1, 0x57, 0xcb, 0x40, 0x8e, 0xb7, 0x0b, 0xa4,
	0xb9, 0xbc, 0x5d, 0x0a, 0xbe, 0x7e, 0xf6, 0xf1, 0x34, 0xcd, 0xd4, 0x97, 0x72, 0x16, 0x24, 0x9c,
	0x85, 0x57, 0xb8, 0xc8, 0x98, 0x42, 0xca, 0x42, 0x96, 0x25, 0x82, 0xa7, 0x98, 0x87, 0x78, 0x4d,
	0x59, 0xb1, 0xf1, 0xab, 0x3f, 0xaf, 0x8b, 0xd9, 0x7e, 0x55, 0x9d, 0xfc, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0x7c, 0x68, 0xb7, 0x2d, 0x2c, 0x04, 0x00, 0x00,
}
